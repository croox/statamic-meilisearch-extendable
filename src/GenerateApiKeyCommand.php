<?php

declare(strict_types=1);

namespace Croox\StatamicMeilisearch;

use Illuminate\Console\Command;
use Meilisearch\Client;
use Meilisearch\Endpoints\Keys;
use Statamic\Facades\Search;
use Statamic\Search\IndexManager;

class GenerateApiKeyCommand extends Command
{
    protected $signature = 'croox:meilisearch:generate-api-key {--force-delete}';
    protected $description = 'Generates a new API Key that is scoped to only indexes required for this project';

    private function keyProperties(): array
    {
        $appName = config('app.name');
        $environment = config('app.env');

        $indexNames = [ Index::prefixedIndexName([ ]) . '*' ];
        foreach ((array) config('statamic.search.indexes') as $config) {
            if ($config['driver'] !== 'meilisearch') {
                continue;
            }
            if (isset($config['index_name'])) {
                $indexNames[] = $config['index_name'];
            }
        }

        $name = sprintf('croox-statamic-meilisearch-%s-%s', $appName, $environment);
        $name = preg_replace('/[^a-z0-9]/', '-', strtolower($name));

        return [
            'name' => $name,
            'description' => 'Generated by croox/statamic-meilisearch',
            'actions' => [
                'search',
                'documents.*',
                'tasks.*',
                'indexes.*'
            ],
            'indexes' => $indexNames,
            'expiresAt' => null,
        ];
    }

    private function hasDifferingIndexes(array $keyProperties, Keys $existingKey): bool
    {
        $existingIndexes = $existingKey->getIndexes();
        $newIndexes = $keyProperties['indexes'];

        return $existingIndexes !== $newIndexes;
    }

    /**
     * @param array $keyProperties
     * @return list{ Keys|null, Keys|null, bool } - [ useExisting, deleteExisting ]
     */
    private function checkForExistingIndex(array $keyProperties, Client $client): array
    {
        $existingKey = null;

        $keys = $client->getKeys();
        foreach ($keys as $key) {
            /** @var Keys $key */
            if ($key->getName() === $keyProperties['name']) {
                $existingKey = $key;
                break;
            }
        }

        if ($existingKey === null) {
            return [ null, null, false ];
        }
        if ($this->option('force-delete') === true) {
            $this->output->info('Force deleting existing key');
            return [ null, $existingKey, false ];
        }


        if (!$this->hasDifferingIndexes($keyProperties, $existingKey)) {
            $this->output->info([
                sprintf(
                    'API Key for %s project already exists and has the correct indexes: %s',
                    $keyProperties['name'],
                    (string) $existingKey->getKey(),
                ),
            ]);
            return [ $existingKey, null, false ];
        }

        $this->output->error([
            sprintf(
                'An API Key for %s already exists: %s. However, it does not have access to the correct indexes.',
                $keyProperties['name'],
                (string) $existingKey->getKey(),
            ),
            sprintf('The key should have access to the following indexes: %s', json_encode($keyProperties['indexes'])),
            sprintf('But has access to the following indexes: %s', json_encode($existingKey->getIndexes())),
            'You can remove this key and recreate it by confirming now. Keep in mind though, ' .
            'that all clients using this key will stop working until they are supplied with the new API Key',
        ]);

        if ($this->confirm('Delete existing index?')) {
            return [ null, $existingKey, false ];
        }


        $this->output->error('Aborting');
        return [ null, null, true ];
    }

    /** @api */
    public function handle(): void
    {
        $masterKey = $this->ask('Please enter your Meilisearch Master Key');

        /** @var string $url */
        $url = config('statamic.search.drivers.meilisearch.credentials.url');
        $client = new Client($url, $masterKey);

        $keyProperties = $this->keyProperties();
        [ $useExisting, $deleteExisting, $abort ] = $this->checkForExistingIndex($keyProperties, $client);
        if ($abort) {
            return;
        }

        if ($deleteExisting !== null) {
            $this->info(sprintf('Deleting existing API Key %s', (string) $deleteExisting->getKey()));
            $client->deleteKey((string) $deleteExisting->getUid());
        }
        if ($useExisting === null) {
            $this->info('Creating new API Key');
            $key = $client->createKey($keyProperties);
            $this->info(sprintf('Created new key %s', (string) $key->getKey()));
        } else {
            $key = $useExisting;
        }

        $this->output->success([
            sprintf('API Key: %s', (string) $key->getKey()),
            sprintf('MEILISEARCH_KEY=%s', (string) $key->getKey()),
        ]);
    }

    private function isPreexistingKey(Client $client, string $name): ?Keys
    {
        $keys = $client->getKeys();

        foreach ($keys as $key) {
            /** @var Keys $key */
            if ($key->getName() === $name) {
                return $key;
            }
        }

        return null;
    }
}
